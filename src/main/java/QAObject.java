import fr.inria.atlanmod.commons.log.Log;
import lombok.Getter;
import lombok.Setter;
import org.apache.commons.io.IOUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.util.Objects.isNull;

/**
 * The type QAObject.
 * <p>
 * For a specific {@link #corpus}, stored in {@link #CORPUS_FILE}, it contains a {@link Map} that stores questions
 * (keys) and a {@link List} of {@link AnswerObject} containing answers for its respective question, generated by
 * one or more language models (for each question, there is only one {@link AnswerObject} per used language model)
 */
public class QAObject {

    /**
     * A {@link Map} containing a {@link List} with all {@link AnswerObject} for each generated question. One
     * question can have multiple {@link AnswerObject} because they may be provided by different language models.
     */
    @Getter
    protected Map<String, List<AnswerObject>> qaPairs;

    /**
     * The text where the language models look for the answers to the specified questions.
     */
    @Getter
    @Setter
    protected String corpus;

    /**
     * The name of the file containing the {@link #corpus}
     */
    @Getter
    protected final String CORPUS_FILE;


    /**
     * Instantiates a new QAObject.
     * <p>
     * The corpus is stored in {@link #corpus}
     *
     * @param corpusFile the name of the file containing the {@link #corpus}
     */
    public QAObject(String corpusFile) {
        qaPairs = new HashMap<>();
        this.CORPUS_FILE = corpusFile;
        try (InputStream inputStream =
                     this.getClass().getResourceAsStream(CORPUS_FILE)) {
            if (isNull(inputStream)) {
                Log.error("Cannot find the file {0}, this processor won't get any corpus", CORPUS_FILE);
            } else {
                this.setCorpus(IOUtils.toString(inputStream, StandardCharsets.UTF_8));
            }
        } catch (IOException e) {
            Log.error("An error occurred when processing the corpus file {0}, this processor may produce "
                    + "unexpected behavior. Check the logs for more information.", CORPUS_FILE);
        }
        Log.info("Loaded corpus from {0}", CORPUS_FILE);
    }

    /**
     * Add a QA pair to {@link #qaPairs}.
     * <p>
     * A question can have multiple answers if multiple language models are used (i.e. one answer by model).
     * <p>
     * If the question is present in {@link #qaPairs}, the answers generated by new language models are added to its
     * {@link List}, and the answers generated by language models present in the existing QA pair are updated.
     *
     * @param question         the question to be added to {@link #qaPairs}
     * @param newAnswerObjects the {@link AnswerObject}s linked to the question.
     */
    public void addQAPair(String question, List<AnswerObject> newAnswerObjects) {
        if (!qaPairs.containsKey(question)) {
            qaPairs.put(question, newAnswerObjects);
        }
        else {
            List<AnswerObject> answerObjects = qaPairs.get(question);
            for (int i = 0; i < newAnswerObjects.size(); i++) {
                boolean modelFound = false;
                String newModelName = newAnswerObjects.get(i).getModelName();
                for (int j = 0; j < answerObjects.size(); j++) {
                    String modelName = answerObjects.get(j).getModelName();
                    if (newModelName.equals(modelName)) {
                        answerObjects.set(i, newAnswerObjects.get(j));
                        modelFound = true;
                        break;
                    }
                }
                if (!modelFound) {
                    answerObjects.add(newAnswerObjects.get(i));
                }
            }
        }
    }

    /**
     * Print {@link #qaPairs}.
     */
    public void printQAPairs() {
        System.out.println("corpusFile: " + this.CORPUS_FILE);
        for (Map.Entry<String, List<AnswerObject>> qaPair : qaPairs.entrySet()) {
            System.out.println("question: " + qaPair.getKey());
            for (AnswerObject answerObject : qaPair.getValue()) {
                System.out.println("\tmodelName: " + answerObject.getModelName());
                System.out.println("\t\tanswer:        " + answerObject.getAnswer());
                System.out.println("\t\tbeginPosition: " + answerObject.getBeginPosition());
                System.out.println("\t\tendPosition:   " + answerObject.getEndPosition());
            }
        }
    }
}
